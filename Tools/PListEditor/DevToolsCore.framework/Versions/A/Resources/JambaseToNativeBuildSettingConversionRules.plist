(
    // Pull general settings out of OTHER_CFLAGS etc.
    ("OTHER_CFLAGS",                extract,    ("^-std=(.*)$"),                    (set, "GCC_C_LANGUAGE_STANDARD", "%@")),
    ("OTHER_CFLAGS",                extract,    ("^-funsigned-char$"),              (set, "GCC_CHAR_IS_UNSIGNED_CHAR", "YES")),
    ("OTHER_CFLAGS",                extract,    ("^-fsigned-char$"),                (set, "GCC_CHAR_IS_UNSIGNED_CHAR", "NO")),
    ("OTHER_CFLAGS",                extract,    ("^-fno-asm$"),                     (set, "GCC_ENABLE_ASM_KEYWORD", "NO")),
    ("OTHER_CFLAGS",                extract,    ("^-trigraphs$"),                   (set, "GCC_ENABLE_TRIGRAPHS", "YES")),
    ("OTHER_CFLAGS",                extract,    ("^-fno-exceptions$"),              (set, "GCC_ENABLE_CPP_EXCEPTIONS", "NO")),
    ("OTHER_CFLAGS",                extract,    ("^-fno-rtti$"),                    (set, "GCC_ENABLE_CPP_RTTI", "NO")),
    ("OTHER_CFLAGS",                extract,    ("^-fpascal-strings$"),             (set, "GCC_ENABLE_PASCAL_STRINGS", "YES")),
    ("OTHER_CFLAGS",                extract,    ("^-fshort-enums$"),                (set, "GCC_SHORT_ENUMS", "YES")),
    ("OTHER_CFLAGS",                extract,    ("^-faltivec$"),                    (set, "GCC_ALTIVEC_EXTENSIONS", "YES")),
    ("OTHER_CFLAGS",                extract,    ("^-g$"),                           (set, "GCC_GENERATE_DEBUGGING_SYMBOLS", "YES")),
    ("OTHER_CFLAGS",                extract,    ("^-pg$"),                          (set, "GENERATE_PROFILING_CODE", "YES")),
    ("OTHER_CFLAGS",                extract,    ("^-fno-common$"),                  (set, "GCC_NO_COMMON_BLOCKS", "YES")),
    ("OTHER_CFLAGS",                extract,    ("^-fno-writable-strings$"),        (set, "GCC_REUSE_STRINGS", "YES")),
    ("OTHER_CFLAGS",                extract,    ("^-fwritable-strings$"),           (set, "GCC_REUSE_STRINGS", "NO")),
    ("OTHER_CFLAGS",                extract,    ("^-mdynamic-no-pic$"),             (set, "GCC_DYNAMIC_NO_PIC", "NO")),
    ("PREFIX_HEADER",               rename,     "GCC_PREFIX_HEADER"),
    ("PRECOMPILE_PREFIX_HEADER",    rename,     "GCC_PRECOMPILE_PREFIX_HEADER"),
    ("DEBUGGING_SYMBOLS",           rename,     "GCC_GENERATE_DEBUGGING_SYMBOLS"),
    ("USE_GCC3_PFE_SUPPORT",        rename,     "GCC_USE_GCC3_PFE_SUPPORT"),
    ("PFE_FILE_C_DIALECTS",         rename,     "GCC_PFE_FILE_C_DIALECTS"),
    ("OPTIMIZATION_CFLAGS",         extract,    ("^-O(.*)$"),                       (set, "GCC_OPTIMIZATION_LEVEL", "%@")),
    ("OPTIMIZATION_CFLAGS",         delete),
    ("OTHER_CFLAGS",                extract,    ("^-O(.*)$"),                       (set, "GCC_OPTIMIZATION_LEVEL", "%@")),

    // Pull input languages out of OTHER_CFLAGS and OTHER_CPLUSPLUSFLAGS.
    ("OTHER_CFLAGS",                extract,    ("^-xc$"),                          (set, "GCC_INPUT_FILETYPE", "sourcecode.c.c")),
    ("OTHER_CFLAGS",                extract,    ("^-x$", "^c$"),                    (set, "GCC_INPUT_FILETYPE", "sourcecode.c.c")),
    ("OTHER_CFLAGS",                extract,    ("^-xobjective-c$"),                (set, "GCC_INPUT_FILETYPE", "sourcecode.c.objc")),
    ("OTHER_CFLAGS",                extract,    ("^-x$", "^objective-c$"),          (set, "GCC_INPUT_FILETYPE", "sourcecode.c.objc")),
    ("OTHER_CFLAGS",                extract,    ("^-xc\\+\\+$"),                      (set, "GCC_INPUT_FILETYPE", "sourcecode.cpp.cpp")),
    ("OTHER_CFLAGS",                extract,    ("^-x$", "^c\\+\\+$"),                (set, "GCC_INPUT_FILETYPE", "sourcecode.cpp.cpp")),
    ("OTHER_CFLAGS",                extract,    ("^-xobjective-c\\+\\+$"),            (set, "GCC_INPUT_FILETYPE", "sourcecode.cpp.objcpp")),
    ("OTHER_CFLAGS",                extract,    ("^-x$", "^objective-c\\+\\+$"),      (set, "GCC_INPUT_FILETYPE", "sourcecode.cpp.objcpp")),
    ("OTHER_CPLUSFLAGS",            extract,    ("^-xc$"),                          (set, "GCC_INPUT_FILETYPE", "sourcecode.c.c")),
    ("OTHER_CPLUSFLAGS",            extract,    ("^-x$", "^c$"),                    (set, "GCC_INPUT_FILETYPE", "sourcecode.c.c")),
    ("OTHER_CPLUSFLAGS",            extract,    ("^-xobjective-c$"),                (set, "GCC_INPUT_FILETYPE", "sourcecode.c.objc")),
    ("OTHER_CPLUSFLAGS",            extract,    ("^-x$", "^objective-c$"),          (set, "GCC_INPUT_FILETYPE", "sourcecode.c.objc")),
    ("OTHER_CPLUSFLAGS",            extract,    ("^-xc\\+\\+$"),                      (set, "GCC_INPUT_FILETYPE", "sourcecode.cpp.cpp")),
    ("OTHER_CPLUSFLAGS",            extract,    ("^-x$", "^c\\+\\+$"),                (set, "GCC_INPUT_FILETYPE", "sourcecode.cpp.cpp")),
    ("OTHER_CPLUSFLAGS",            extract,    ("^-xobjective-c\\+\\+$"),            (set, "GCC_INPUT_FILETYPE", "sourcecode.cpp.objcpp")),
    ("OTHER_CPLUSFLAGS",            extract,    ("^-x$", "^objective-c\\+\\+$"),      (set, "GCC_INPUT_FILETYPE", "sourcecode.cpp.objcpp")),

    // Pull warnings out of WARNING_CFLAGS and OTHER_CFLAGS.
    ("WARNING_CFLAGS",              extract,    ("^-Werror$"),                      (set, "GCC_TREAT_WARNINGS_AS_ERRORS", "YES")),
    ("OTHER_CFLAGS",                extract,    ("^-Werror$"),                      (set, "GCC_TREAT_WARNINGS_AS_ERRORS", "YES")),
    ("WARNING_CFLAGS",              extract,    ("^-fpermissive$"),                 (set, "GCC_TREAT_NONCONFORMANT_CODE_ERRORS_AS_WARNINGS", "YES")),
    ("OTHER_CFLAGS",                extract,    ("^-fpermissive$"),                 (set, "GCC_TREAT_NONCONFORMANT_CODE_ERRORS_AS_WARNINGS", "YES")),
    ("WARNING_CFLAGS",              extract,    ("^-w$"),                           (set, "GCC_WARN_INHIBIT_ALL_WARNINGS", "YES")),
    ("OTHER_CFLAGS",                extract,    ("^-w$"),                           (set, "GCC_WARN_INHIBIT_ALL_WARNINGS", "YES")),
    ("WARNING_CFLAGS",              extract,    ("^-pedantic$"),                    (set, "GCC_WARN_PEDANTIC", "YES")),
    ("OTHER_CFLAGS",                extract,    ("^-pedantic$"),                    (set, "GCC_WARN_PEDANTIC", "YES")),

    // Pull preprocessor definitions out of OTHER_CFLAGS.
    ("OTHER_CFLAGS",                extract,    ("^-D(.*)$"),                       (append, "GCC_PREPROCESSOR_DEFINITIONS", "%@")),

    // Pull header search paths out of OTHER_CFLAGS.
    ("OTHER_CFLAGS",                extract,    ("^-I$", "^(.*)$"),                 (append, "HEADER_SEARCH_PATHS", "%@")),
    ("OTHER_CFLAGS",                extract,    ("^-I(.*)$"),                       (append, "HEADER_SEARCH_PATHS", "%@")),
    
    // Pull library search paths out of OTHER_CFLAGS.
    ("OTHER_CFLAGS",                extract,    ("^-L$", "^(.*)$"),                 (append, "LIBRARY_SEARCH_PATHS", "%@")),
    ("OTHER_CFLAGS",                extract,    ("^-L(.*)$"),                       (append, "LIBRARY_SEARCH_PATHS", "%@")),

    // Pull framework search paths out of OTHER_CFLAGS.
    ("OTHER_CFLAGS",                extract,    ("^-F$", "^(.*)$"),                 (append, "FRAMEWORK_SEARCH_PATHS", "%@")),
    ("OTHER_CFLAGS",                extract,    ("^-F(.*)$"),                       (append, "FRAMEWORK_SEARCH_PATHS", "%@")),
    
    // Pull supported flags out of LEXFLAGS.
    ("LEXFLAGS",                extract,    ("^-i$"),                (set, "LEX_CASE_INSENSITIVE_SCANNER", "YES")),
    ("LEXFLAGS",                extract,    ("^-s$"),                (set, "LEX_SUPPRESS_DEFAULT_RULE", "YES")),
    ("LEXFLAGS",                extract,    ("^-L$"),                (set, "LEX_INSERT_LINE_DIRECTIVES", "NO")),
    ("LEXFLAGS",                extract,    ("^-w$"),                (set, "LEX_SUPPRESS_WARNINGS", "YES")),

    // Pull supported flags out of YACCFLAGS.
    ("YACCFLAGS",                extract,    ("^-i$"),                (set, "YACC_INSERT_LINE_DIRECTIVES", "NO")),
    ("YACCFLAGS",                extract,    ("^-r$"),                (set, "YACC_SEPARATE_CODE_FILE", "YES")),
    ("YACCFLAGS",                extract,    ("^-t$"),                (set, "YACC_GENERATE_DEBUGGING_DIRECTIVES", "YES")),

    // Remove the prefix and suffix, if any, from PRODUCT_NAME.
    ("PRODUCT_NAME",                invoke,     "removePrefixAndSuffixFromSetting:"),
    
    // If GCC_VERSION is set, then remove it and create a corresponding target build rule.
    ("GCC_VERSION",                 invoke,     "convertGccVersionToBuildRuleForSetting:"),

    // Rename public/private header directory locations.
    ("PUBLIC_HEADER_DIR",           rename,     "PUBLIC_HEADERS_FOLDER_PATH"),
    ("PRIVATE_HEADER_DIR",          rename,     "PRIVATE_HEADERS_FOLDER_PATH"),
    
    // Interfacer build settings
    ("FRAMEWORK_INTERFACES",                rename,     "INTERFACER_FRAMEWORK_INTERFACES"),
    ("GENERATE_HEADERS",                    rename,     "INTERFACER_GENERATE_HEADERS"),
    ("GENERATE_EXPORT_SETS_AND_GLUE",       rename,     "INTERFACER_GENERATE_EXPORT_SETS_AND_GLUE"),
    ("GENERATE_COMPONENT_GLUE",             rename,     "INTERFACER_GENERATE_COMPONENT_GLUE"),
    ("ADDITIONAL_EXPORTS_FILE",             rename,     "INTERFACER_ADDITIONAL_EXPORTS_FILE"),
    ("ADDITIONAL_TRADITIONAL_EXPORTS_FILE", rename,     "INTERFACER_ADDITIONAL_TRADITIONAL_EXPORTS_FILE"),

    // Upgrade obsolete B&I build settings
    ("INTERNAL_BUILD_VARIANTS",                 rename,         "BUILD_VARIANTS"),
    ("INTERNAL_BUILD_VARIANTS_ONLY_IN_JASPER",  delete),
)
