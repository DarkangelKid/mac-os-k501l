/**
    Built-in compiler specifications

    Copyright (c) 2000-2009 Apple Inc.  All rights reserved.

    Some of the compiler specifications that are built into Xcode.  Any or all of these could be overridden by separate compiler specification property lists.  Note that most of the more fashionable specifications each live in their own .xcspec file with a sensible base name.
*/

(
    // Change global symbols not listed in input file to static symbols.
    {   Type = Tool;
        Identifier = com.apple.build-tools.nmedit;
        Name = "Nmedit";
        Description = "Nmedit Symbol Editor";
        ExecPath = "$(DEVELOPER_BIN_DIR)/nmedit";
    },

    // Abstract superspec for resource processing.  Subspecs can be implemented to process a resource in a particular way.  By default, resources are simply copied to their destination.  Subspecs need to be sure to set their IsAbstract attribute to NO.
    {   Type = Tool;
        Identifier = com.apple.compilers.resource-copier;
        Name = "Resource Copier";
        Description = "Abstract specification for resource copying";
        IsAbstract = YES;
        CommandOutputParser = (
            ("()()(^[^:]+: [^:]+: No such file or directory)",  emit-error),
            ("()()(^[^:]+: [^:]+: Permission denied)",  emit-error),
            ("()()(^[^:]+: [^:]+: Is a directory)",  emit-error),
        );
    },

    // Specification for shell scripts, just to provide output-parsing regexes.
    {   Type = Tool;
        Identifier = com.apple.commands.shell-script;
        Name = "Shell Script Invocation";
        IsAbstract = Yes;       // This is an internal tool, so we keep it out of the user interface
        CommandOutputParser = (
            XCUnitTestOutputParser,
            XCShellScriptOutputParser,
            (   ("()()^.+\.sh: (line.+)" , emit-error),
            ),
            (   ("()()(warning: [^:]+: No such file or directory)",  emit-error),
                ("()()(^[^:]+: [^:]+: Permission denied)",  emit-error),
                ("()()(^[^:]+: [^:]+: Is a directory)",  emit-error),
            ),
            XCGccCommandOutputParser,
        );
    },

    // Headermap generator (a built-in tool).
    {   Type = Tool;
        Identifier = com.apple.commands.built-in.headermap-generator;
        Class = XCToolSpecificationHeadermapGenerator;
        Name = "Headermap Generator";
        IsAbstract = Yes;       // This is an internal tool, so we keep it out of the user interface
        CommandOutputParser = (
            (   ("()()(^[^:]+: [^:]+: No such file or directory)",  emit-error),
                ("()()(^[^:]+: [^:]+: Permission denied)",  emit-error),
                ("()()(^[^:]+: [^:]+: Is a directory)",  emit-error),
            ),
        );
    },
    
    // dsymutil tool
    {   Type = Tool;
        Identifier = com.apple.tools.dsymutil;
        Name = "dsymutil";
        Description = "dsymutil dSYM file generator";
        IsAbstract = YES;
        CommandLine = "$(DEVELOPER_BIN_DIR)/dsymutil [options] [input] -o $(OutputPath)";
        RuleName = "GenerateDSYMFile $(OutputPath) $(InputPath)";
        
        FileTypes = (compiled.mach-o.executable, compiled.mach-o.objfile, compiled.mach-o.dylib, compiled.mach-o.bundle, archive.ar);
        Outputs = ( "$(OutputPath)" );
        
        Options = (
            {   Name = DSYMUTIL_VERBOSE;
                Type = Boolean;
                DefaultValue = NO;
                CommandLineFlag = "--verbose";
            }
        );
    
        CommandOutputParser = (
            (   ("()()(warning: .+)",  emit-warning),
                ("()()(error: .+)",  emit-error),
            ),
        );
    },

    //
    // Info.plist Utility
    //
    // This tool performs various somewhat specific operations on Info.plist files.  Specifically, it reads the input file, parses it as a property list, and optionally expands property macros in all values in the plist.  All keys in a predefined set are checked to make sure the corresponding value isn't empty;  if it is equal to the empty string, the key-value pair is removed (for example, it is not allowed to have a CFBundleExecutableName key with an empty value, so if that expands to empty it should just be removed).  The expansion dictionaries are passed out-of-band, in the command's internal 'custom tool info object' property.
    //
    {   Type = Tool;
        Identifier = com.apple.tools.info-plist-utility;
        Name = "Info.plist Utility";
        IsAbstract = Yes;               // This is an internal tool, so we keep it out of the user interface
        CommandLine = "builtin-infoPlistUtility [input] [options] -o [output]";
        RuleName = ( "ProcessInfoPlistFile", "$(OutputPath)", "$(InputPath)" );
        ExecDescription = "Process $(InputFileRelativePath)";
        CommandOutputParser = (
            ("()()^warning: (.*)",  emit-warning),
            ("()()^error: (.*)",  emit-error),
        );
        Options = (
            {   Name = "GeneratedPkgInfoFile";
                Type = Path;
                CommandLineFlag = "-genpkginfo";
                OutputDependencies = "$(GeneratedPkgInfoFile)";
            },
            {   Name = "ExpandBuildSettings";
                Type = Boolean;
                CommandLineFlag = "-expandbuildsettings";
            },
            {   Name = "OutputFormat";
                Type = Enumeration;
                AllowedValues = (
                    {   Value = "same-as-input";
                        // this is the default, and so we generate no command line flag
                        CommandLineArgs = ( );
                    },
                    {   Value = "openstep";
                        CommandLineArgs = ( "-format", "openstep" );
                    },
                    {   Value = "XML";
                        CommandLineArgs = ( "-format", "xml" );
                    },
                    {   Value = "xml";
                        CommandLineArgs = ( "-format", "xml" );
                    },
                    {   Value = "binary";
                        CommandLineArgs = ( "-format", "binary" );
                    },
                );
                DefaultValue = "same-as-input";
            },
            {   Name = "PLATFORM_NAME";
                Type = String;
                CommandLineFlag = "-platform";
            },
            {   Name = "CODE_SIGN_RESOURCE_RULES_IN_BUNDLE";
                Type = String;
                CommandLineFlag = "-resourcerulesfile";
            },
            {   Name = "AdditionalInfoFileKeys";
                Type = String;
                CommandLineFlag = "-infofilekeys";
            },
            {   Name = "AdditionalInfoFileValues";
                Type = String;
                CommandLineFlag = "-infofilevalues";
            },
        );
    },
)
